@page "/"
@inject ICoffeeService CoffeeService
@inject IWeatherService WeatherService
@inject IJSRuntime jsRuntime
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation

<PageTitle>Index</PageTitle>

<h1 class="text-center mb-3">Welcome to the coffee shop</h1>

<div class="container p-5">
    <div class="row">
        <div class="col-lg-4 offset-lg-4 p-4 text-center">
            <div class="mb-3">
                @if (geolocationPosition != null)
                {
                    <p>Your current Locaiton is: </p>
                    <p>LAT: @latitude.</p>
                    <p>LON: @longitude</p>
                    @if (Weather != null)
                    {
                        <p>Temperature is: @Weather.Temperature at @Weather.City</p>
                    }
                }
                else
                {
                    <p>Getting your location...</p>
                }
                @if (Coffee != null)
                {
                    @if (Coffee.Message.StartsWith("Http"))
                    {
                        <p>Please wait, coffee machine is out of coffee</p>
                    }
                    else
                    {
                        <p>@Coffee.Message</p>
                        <p>at @Coffee.Prepared</p>
                        <p>Enjoy your coffee!</p>
                    }
                    <p>You Ordered :@orderPlaced coffee</p>
                }
            </div>
            <div class="mb-3">
                <button disabled="@isWaiting" type="button" class="btn btn-primary" @onclick="()=>OrderCoffee(latitude, longitude)">Get coffee</button>
            </div>
        </div>
    </div>
</div>

@code {

    public Coffee? Coffee { get; set; }
    public Weather? Weather { get; set; }
    private int orderPlaced = 0;
    private bool isWaiting = true;

    private double latitude, longitude;
    private WindowNavigatorGeolocation geolocation;
    private GeolocationPosition geolocationPosition;


    protected override async Task OnInitializedAsync()
    {
        var window = await jsRuntime.Window();
        var navigator = await window.Navigator();
        geolocation = navigator.Geolocation;

        await GetLocation();

        await Task.Delay(3000);
        isWaiting = false;

    }

    private async void OrderCoffee(double lat, double lon)
    {             
        isWaiting = true;  
        Coffee = await CoffeeService.GetCoffee(lat, lon); 
        orderPlaced++;
        StateHasChanged();

        await HandleButtonClick();
        
    }

    private async Task GetLocation()
    {
        geolocationPosition = (await geolocation.GetCurrentPosition(new PositionOptions()
            {
                EnableHighAccuracy = true,
                MaximumAgeTimeSpan = TimeSpan.FromHours(1),
                TimeoutTimeSpan = TimeSpan.FromMinutes(1)
            })).Location;

        latitude = geolocationPosition.Coords.Latitude;
        longitude = geolocationPosition.Coords.Longitude;

        Weather = await WeatherService.GetWeather(latitude, longitude);
    }

    private async Task HandleButtonClick()
    {
        await Task.Delay(2000);
        isWaiting = false;
        StateHasChanged();
    }
}